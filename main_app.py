# main_app.py (VERS√ÉO CORRIGIDA E COMPLETA)

import tkinter as tk
from tkinter import ttk, messagebox
import ttkbootstrap as ttkb
from datetime import datetime
import json
import os
import threading
import sys
import queue
import logging
import time

# Importa√ß√µes de seus servi√ßos e componentes.
from notification_service import play_alert_sound, show_windows_ok_popup, send_telegram_alert, AlertConsolidator
import robust_services

# Importa as fun√ß√µes de API e o ciclo de monitoramento
from monitoring_service import (
    run_monitoring_cycle,
    run_single_symbol_update,
    get_coingecko_global_mapping,
    fetch_all_binance_symbols_startup,
    get_btc_dominance
)

# Importa os componentes de UI
from core_components import (
    get_application_path,
    CryptoCard,
    AlertConfigDialog,
    AlertHistoryWindow,
    AlertManagerWindow,
    StartupConfigDialog
)

# Importando as janelas Toplevel
from api_config_window import ApiConfigWindow
from capital_flow_window import CapitalFlowWindow
from token_movers_window import TokenMoversWindow
from help_window import HelpWindow
from support_material_window import SupportMaterialWindow
from market_analysis_config_window import MarketAnalysisConfigWindow

try:
    from PIL import Image, ImageTk
except ImportError:
    messagebox.showerror("Biblioteca Faltando", "A biblioteca 'Pillow' √© necess√°ria. Instale com 'pip install Pillow'")
    sys.exit()


class CryptoApp:
    def __init__(self, root, config, all_symbols):
        print("DEBUG: Iniciando __init__ da CryptoApp...")
        self.root = root
        self.config = config
        self.all_symbols = all_symbols
        
        print("LOG: Inicializando CryptoApp: Buscando mapeamento CoinGecko...")
        self.coingecko_mapping = get_coingecko_global_mapping()
        print("LOG: Mapeamento CoinGecko carregado. Inicializando fila de dados...")
        
        self.data_queue = queue.Queue()
        self.monitoring_thread = None
        self.stop_monitoring_event = threading.Event()
        self.coin_cards = {}
        
        print("LOG: Carregando hist√≥rico de alertas...")
        self.alert_history = self.load_alert_history()
        
        print("LOG: Configurando logging...")
        self.setup_logging()
        
        print("LOG: Configurando UI...")
        self.setup_ui()
        
        print("LOG: Inicializando sistema de consolida√ß√£o de alertas...")
        self.alert_consolidator = AlertConsolidator(self.root, self)
        
        print("LOG: UI configurada. Iniciando monitoramento...")
        self.start_monitoring()
        
        print("LOG: Monitoramento iniciado. Agendando processamento da fila...")
        self.root.after(100, self.process_queue)
        self.update_dominance_display()
        
        print("LOG: __init__ da CryptoApp finalizado com sucesso.")

    def setup_logging(self):
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    def setup_ui(self):
        # Configura a janela principal com tema escuro
        self.root.title("Crypto Monitor Pro")
        self.root.geometry("1280x800")
        
        # Cria menu moderno com √≠cones
        self.menu_bar = tk.Menu(self.root)
        self.root.config(menu=self.menu_bar)
        
        file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Arquivo", menu=file_menu)
        file_menu.add_command(label="‚öôÔ∏è Gerenciar Alertas", command=self.show_alert_manager)
        file_menu.add_separator()
        file_menu.add_command(label="üö™ Sair", command=self.on_closing)
        
        analysis_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="üìä An√°lise de Mercado", menu=analysis_menu)
        analysis_menu.add_command(label="üíπ Fluxo de Capital (Categorias)", command=self.show_capital_flow_window)
        analysis_menu.add_command(label="üìà Ganhadores e Perdedores", command=self.show_token_movers_window)
        analysis_menu.add_command(label="üîî Hist√≥rico de Alertas", command=self.show_alert_history_window)
        
        config_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="‚öôÔ∏è Configura√ß√µes", menu=config_menu)
        config_menu.add_command(label="üîä Configurar Sons", command=self.show_sound_config_window)

        # Header principal com gradiente
        header_frame = ttkb.Frame(self.root, bootstyle="dark")
        header_frame.pack(side="top", fill="x")
        
        # T√≠tulo da aplica√ß√£o
        title_frame = ttkb.Frame(header_frame, bootstyle="dark", padding=10)
        title_frame.pack(side="top", fill="x")
        
        title_label = ttkb.Label(
            title_frame, 
            text="CRYPTO MONITOR PRO", 
            font=("Segoe UI", 16, "bold"),
            bootstyle="info"
        )
        title_label.pack(side="left")
        
        # Status frame com visual moderno
        status_frame = ttkb.Frame(header_frame, padding=(15, 10), bootstyle="secondary")
        status_frame.pack(side="top", fill="x")

        # Frame para domin√¢ncia BTC com visual moderno
        dominance_frame = ttkb.Frame(status_frame, bootstyle="secondary")
        dominance_frame.pack(side="left")
        
        # √çcone para domin√¢ncia BTC
        btc_icon_label = ttkb.Label(
            dominance_frame, 
            text="‚Çø", 
            font=("Arial", 16, "bold"), 
            bootstyle="warning"
        )
        btc_icon_label.pack(side="left", padx=(0, 5))
        
        # Label para texto de domin√¢ncia
        ttkb.Label(
            dominance_frame, 
            text="Domin√¢ncia BTC:", 
            font=("Segoe UI", 11, "bold"), 
            bootstyle="light"
        ).pack(side="left")
        
        # Valor de domin√¢ncia com destaque
        self.dominance_label = ttkb.Label(
            dominance_frame, 
            text="Carregando...", 
            font=("Segoe UI", 12, "bold"), 
            bootstyle="warning", 
            width=12
        )
        self.dominance_label.pack(side="left", padx=(8, 0))
        
        # Separador vertical
        ttkb.Separator(status_frame, orient="vertical", bootstyle="light").pack(side="left", fill="y", padx=15, pady=5)
        
        # Status da API
        api_status_frame = ttkb.Frame(status_frame, bootstyle="secondary")
        api_status_frame.pack(side="left")
        
        ttkb.Label(
            api_status_frame, 
            text="Status API:", 
            font=("Segoe UI", 11), 
            bootstyle="light"
        ).pack(side="left")
        
        self.update_status_label = ttkb.Label(
            api_status_frame, 
            text="", 
            font=("Segoe UI", 11, "bold"), 
            bootstyle="secondary"
        )
        self.update_status_label.pack(side="left", padx=(8, 0))
        
        # Bot√£o de atualiza√ß√£o manual com design moderno
        self.update_button = ttkb.Button(
            status_frame, 
            text="üîÑ Atualizar Dados", 
            command=self.manual_update_prices, 
            bootstyle="info", 
            width=18
        )
        self.update_button.pack(side="right", padx=(0, 10))
        
        # Inicia verifica√ß√£o cont√≠nua do status da API
        self.check_api_status()
        
        # Container principal com fundo escuro
        main_container = ttkb.Frame(self.root, bootstyle="dark")
        main_container.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Cabe√ßalho para as moedas
        coins_header = ttkb.Frame(main_container, bootstyle="dark")
        coins_header.pack(fill="x", pady=(0, 10))
        
        ttkb.Label(
            coins_header, 
            text="Suas Criptomoedas Monitoradas", 
            font=("Segoe UI", 14, "bold"),
            bootstyle="info"
        ).pack(side="left")
        
        # Frame principal com scroll
        main_frame = ttkb.Frame(main_container, bootstyle="dark", padding=5)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Canvas com scrollbar para os cards
        self.canvas = tk.Canvas(
            main_frame, 
            highlightthickness=0, 
            bg="#2a2a2a" # CORRE√á√ÉO: Cor de fundo expl√≠cita para o canvas
        )
        
        # Scrollbar moderna
        self.scrollbar = ttkb.Scrollbar(
            main_frame, 
            orient="vertical", 
            command=self.canvas.yview, 
            bootstyle="rounded"
        )
        
        # Frame scroll√°vel para os cards
        self.scrollable_frame = ttkb.Frame(self.canvas, bootstyle="dark")
        self.scrollable_frame.bind(
            "<Configure>", 
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        self.root.bind('<MouseWheel>', self._on_mousewheel)
        
        # Footer com informa√ß√µes de status
        footer_frame = ttkb.Frame(self.root, padding=(15, 8), bootstyle="dark")
        footer_frame.pack(side="bottom", fill="x")
        
        # Status da sess√£o
        ttkb.Label(
            footer_frame, 
            text=f"Sess√£o iniciada: {datetime.now().strftime('%d/%m/%Y %H:%M')}",
            font=("Segoe UI", 9),
            bootstyle="secondary"
        ).pack(side="left")
        
        # Copyright
        ttkb.Label(
            footer_frame, 
            text="¬© 2023 Crypto Monitor Pro",
            font=("Segoe UI", 9),
            bootstyle="secondary"
        ).pack(side="right")
        
        # Atualiza a exibi√ß√£o dos cards
        self.update_coin_cards_display()

    def update_coin_cards_display(self):
        # Limpa todos os widgets existentes
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
            
        # Obt√©m a lista de moedas monitoradas
        monitored_symbols = [c['symbol'] for c in self.config.get('cryptos_to_monitor', [])]
        self.coin_cards = {}
        
        # Define o n√∫mero de colunas com base na resolu√ß√£o
        screen_width = self.root.winfo_screenwidth()
        if screen_width >= 1920:
            num_columns = 5  # Para telas grandes
        elif screen_width >= 1440:
            num_columns = 4  # Para telas m√©dias
        else:
            num_columns = 3  # Para telas menores
        
        # Cria um card para cada moeda
        for i, symbol in enumerate(monitored_symbols):
            base_asset = symbol.replace('USDT', '').upper()
            coin_name = self.coingecko_mapping.get(base_asset, base_asset) 
            
            # Cria frame de container para o card com espa√ßamento
            card_container = ttkb.Frame(self.scrollable_frame, bootstyle="dark")
            
            # Cria o card dentro do container
            card = CryptoCard(card_container, symbol, coin_name)
            card.pack(fill='both', expand=True)
            self.coin_cards[symbol] = card
            
            # Posiciona o container na grade
            row, col = divmod(i, num_columns)
            card_container.grid(
                row=row, 
                column=col, 
                padx=12,  # Espa√ßamento horizontal
                pady=12,  # Espa√ßamento vertical
                sticky="nsew"  # Expande em todas as dire√ß√µes
            )
            
            # Configura a coluna para crescer proporcionalmente
            self.scrollable_frame.columnconfigure(col, weight=1)
            
        # Se n√£o houver moedas monitoradas, mostra mensagem informativa
        if not monitored_symbols:
            empty_frame = ttkb.Frame(self.scrollable_frame, bootstyle="dark", padding=50)
            empty_frame.grid(row=0, column=0, sticky="nsew")
            
            ttkb.Label(
                empty_frame,
                text="Nenhuma moeda monitorada",
                font=("Segoe UI", 16, "bold"),
                bootstyle="secondary"
            ).pack(pady=(20, 10))
            
            ttkb.Label(
                empty_frame,
                text="Use o menu 'Arquivo > Gerenciar Alertas' para adicionar moedas",
                font=("Segoe UI", 12),
                bootstyle="secondary"
            ).pack()

    def update_card_data(self, data):
        """
        Atualiza os dados de um card de criptomoeda com anima√ß√£o e efeitos visuais.
        """
        symbol = data.get('symbol')
        card = self.coin_cards.get(symbol)
        if not card: 
            return  # Se o card n√£o existir, sai da fun√ß√£o

        # Obt√©m o novo pre√ßo
        new_price = data.get('current_price', 0.0)
        price_label = card.data_labels.get('current_price')
        
        # Efeito visual para mudan√ßa de pre√ßo
        if price_label:
            # Define a cor com base na varia√ß√£o
            if card.previous_price != 0:
                if new_price > card.previous_price: 
                    price_color = 'success'
                    # Adiciona efeito de pulsa√ß√£o para aumento
                    self._pulse_label(price_label, 'success')
                elif new_price < card.previous_price: 
                    price_color = 'danger'
                    # Adiciona efeito de pulsa√ß√£o para diminui√ß√£o
                    self._pulse_label(price_label, 'danger')
                else:
                    price_color = 'info'
            else:
                price_color = 'info'
            
            # Configura a cor do label
            price_label.config(bootstyle=price_color)
        
        # Atualiza o pre√ßo anterior
        card.previous_price = new_price

        # Atualiza todos os labels com os novos dados
        for key, label in card.data_labels.items():
            value = data.get(key, 'N/A')
            
            # Formata valores num√©ricos
            if isinstance(value, (int, float)):
                if key == 'current_price': 
                    # Formata pre√ßo com precis√£o adaptativa
                    if value < 0.001:
                        text = f"${value:.8f}"
                    elif value < 0.01:
                        text = f"${value:.6f}"
                    elif value < 1:
                        text = f"${value:.4f}"
                    else:
                        text = f"${value:,.2f}"
                        
                elif key == 'price_change_24h': 
                    # Adiciona seta indicativa para varia√ß√£o
                    arrow = "‚ñ≤" if value >= 0 else "‚ñº"
                    text = f"{arrow} {abs(value):.2f}%"
                    
                elif key == 'volume_24h':
                    # Formata volumes grandes
                    if value >= 1_000_000_000: 
                        text = f"${value/1_000_000_000:.2f}B"
                    elif value >= 1_000_000: 
                        text = f"${value/1_000_000:.2f}M"
                    else: 
                        text = f"${value/1_000:.2f}K"
                        
                elif key == 'rsi_value':
                    # Formata RSI com cor indicativa
                    text = f"{value:.1f}"
                    if value <= 30:
                        label.config(bootstyle="success")  # Sobrevendido
                    elif value >= 70:
                        label.config(bootstyle="danger")   # Sobrecomprado
                    else:
                        label.config(bootstyle="light")  # Normal
                else: 
                    text = f"{value:.2f}"
            else:
                # Valores n√£o num√©ricos
                text = str(value)

            # Atualiza o texto do label
            label.config(text=text)
            
            # Configura cores espec√≠ficas para alguns tipos de dados
            if key == 'price_change_24h' and isinstance(value, (int, float)):
                color = "success" if value >= 0 else "danger"
                label.config(bootstyle=color)

    def _pulse_label(self, label, color_style):
        """
        Cria um efeito de pulsa√ß√£o no label para destacar mudan√ßas de pre√ßo
        """
        # Salva o estilo atual
        original_style = label.cget('bootstyle')
        
        # Sequ√™ncia de pulsa√ß√£o: forte -> fraco -> normal
        self.root.after(0, lambda: label.config(bootstyle=f"{color_style}"))
        self.root.after(600, lambda: label.config(bootstyle=f"{color_style}-outline"))
        self.root.after(1200, lambda: label.config(bootstyle=original_style))

    def start_monitoring(self):
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            return
        self.stop_monitoring_event.clear()
        self.monitoring_thread = threading.Thread(
            target=run_monitoring_cycle,
            args=(self.config, self.data_queue, self.stop_monitoring_event, self.coingecko_mapping),
            daemon=True
        )
        self.monitoring_thread.start()
        logging.info("Servi√ßo de monitoramento iniciado.")

    def process_queue(self):
        try:
            while not self.data_queue.empty():
                item = self.data_queue.get_nowait()
                if item['type'] == 'data':
                    self.update_card_data(item['payload'])
                elif item['type'] == 'alert':
                    self.handle_alert(item['payload'])
        finally:
            self.root.after(200, self.process_queue)

    def handle_alert(self, payload):
        message = payload.get('message', 'Alerta gen√©rico')
        sound = payload.get('sound')
        symbol = payload.get('symbol')
        trigger = payload.get('trigger')
        analysis_data = payload.get('analysis_data')
        
        # Salva no hist√≥rico
        self.log_and_save_alert(symbol, trigger, analysis_data)
        
        # Adiciona ao consolidador de alertas (em vez de mostrar popup individual)
        self.alert_consolidator.add_alert(symbol, trigger, message, sound)
        
        # Envia para Telegram (mantido para compatibilidade)
        send_telegram_alert(self.config.get('telegram_bot_token'), self.config.get('telegram_chat_id'), message)

    def on_closing(self):
        if messagebox.askokcancel("Sair", "Deseja realmente fechar o programa?"):
            logging.info("Fechando o programa...")
            self.stop_monitoring_event.set()
            if self.monitoring_thread:
                self.monitoring_thread.join(timeout=5)
            self.save_config()
            self.save_alert_history()
            self.root.destroy()
            sys.exit()

    def save_config(self):
        config_path = os.path.join(get_application_path(), "config.json")
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2)
            logging.info("Configura√ß√µes salvas com sucesso.")
        except Exception as e:
            logging.error(f"Erro ao salvar configura√ß√µes: {e}")

    def load_alert_history(self):
        history_path = os.path.join(get_application_path(), "alert_history.json")
        try:
            with open(history_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_alert_history(self):
        history_path = os.path.join(get_application_path(), "alert_history.json")
        try:
            with open(history_path, 'w', encoding='utf-8') as f:
                json.dump(self.alert_history, f, indent=2)
            print("LOG: Hist√≥rico de alertas salvo.")
        except Exception as e:
            print(f"ERRO: N√£o foi poss√≠vel salvar o hist√≥rico de alertas: {e}")

    def log_and_save_alert(self, symbol, trigger, data):
        alert_entry = {'timestamp': datetime.now().isoformat(), 'symbol': symbol, 'trigger': trigger, 'data': data}
        self.alert_history.insert(0, alert_entry)
        if len(self.alert_history) > 200:
            self.alert_history = self.alert_history[:200]

    def show_alert_manager(self):
        AlertManagerWindow(self)

    def show_capital_flow_window(self):
        print("LOG: Abrindo a janela de Fluxo de Capital.")
        from pycoingecko import CoinGeckoAPI
        cg_client = CoinGeckoAPI()
        # CORRE√á√ÉO: Argumento 'self.config' removido
        CapitalFlowWindow(self.root, self, cg_client, robust_services.data_cache, robust_services.rate_limiter)

    def show_token_movers_window(self):
        print("LOG: Abrindo a janela de Ganhadores e Perdedores.")
        from pycoingecko import CoinGeckoAPI
        cg_client = CoinGeckoAPI()
        # CORRE√á√ÉO: Argumento 'self.config' removido
        TokenMoversWindow(self.root, self, cg_client, robust_services.data_cache, robust_services.rate_limiter)

    def show_alert_history_window(self):
        AlertHistoryWindow(self)
    
    def show_sound_config_window(self):
        """Abre a janela de configura√ß√£o de sons."""
        from sound_config_window import SoundConfigWindow
        SoundConfigWindow(self.root, self)

    def center_toplevel_on_main(self, toplevel_window):
        self.root.update_idletasks()
        main_x = self.root.winfo_x()
        main_y = self.root.winfo_y()
        main_width = self.root.winfo_width()
        main_height = self.root.winfo_height()
        top_width = toplevel_window.winfo_width()
        top_height = toplevel_window.winfo_height()

        x = main_x + (main_width - top_width) // 2
        y = main_y + (main_height - top_height) // 2

        screen_width = toplevel_window.winfo_screenwidth()
        screen_height = toplevel_window.winfo_screenheight()
        x = max(0, min(x, screen_width - top_width))
        y = max(0, min(y, screen_height - top_height))

        toplevel_window.geometry(f"+{x}+{y}")
        
    def update_dominance_display(self):
        """Busca e atualiza o label da domin√¢ncia do BTC em uma thread."""
        
        def update_task():
            try:
                dominance = get_btc_dominance()
                # Atualiza a UI na thread principal
                self.root.after(0, lambda: self.dominance_label.config(text=dominance))
                print(f"LOG: Domin√¢ncia BTC atualizada: {dominance}")
            except Exception as e:
                print(f"ERRO: Erro ao atualizar domin√¢ncia BTC: {e}")
                # Em caso de erro, agenda pr√≥xima tentativa
                self.root.after(60000, self.update_dominance_display)
                return
            
            # Agenda pr√≥xima atualiza√ß√£o em 5 minutos
            self.root.after(300000, self.update_dominance_display)

        threading.Thread(target=update_task, daemon=True).start()

    def manual_update_prices(self):
        """Atualiza os pre√ßos manualmente, respeitando os limites da API."""
        # Verifica se √© seguro realizar a atualiza√ß√£o
        can_update, status_message = robust_services.rate_limiter.can_perform_manual_update()
        
        if not can_update:
            # Mostra mensagem de erro e n√£o permite atualiza√ß√£o
            self.update_status_label.config(text=f"‚ö†Ô∏è {status_message}", bootstyle="danger")
            print(f"LOG: Atualiza√ß√£o manual bloqueada - {status_message}")
            
            # Remove a mensagem ap√≥s 5 segundos
            self.root.after(5000, lambda: self.update_status_label.config(text=""))
            return
        
        # Se for seguro, mostra o status e continua
        usage = robust_services.rate_limiter.get_current_usage()
        status_text = f"üîÑ {status_message}"
        self.update_status_label.config(text=status_text, bootstyle="info")
        
        # Pequena pausa para mostrar o status
        self.root.after(1000, lambda: self._start_manual_update())
    
    def _start_manual_update(self):
        """Inicia a atualiza√ß√£o manual ap√≥s verifica√ß√£o de seguran√ßa."""
        # Desabilita o bot√£o durante a atualiza√ß√£o
        self.update_button.config(state='disabled', text='Atualizando...')
        self.update_status_label.config(text="Atualizando pre√ßos...", bootstyle="warning")
        
        # Executa a atualiza√ß√£o em uma thread separada para n√£o bloquear a UI
        threading.Thread(target=self._perform_manual_update, daemon=True).start()
    
    def _perform_manual_update(self):
        """Executa a atualiza√ß√£o manual dos pre√ßos."""
        try:
            # Ativa modo conservador para atualiza√ß√£o manual
            robust_services.rate_limiter.set_manual_update_mode(True)
            
            # Limpa o cache para for√ßar atualiza√ß√£o
            robust_services.data_cache.cache.clear()
            print("LOG: Cache limpo para atualiza√ß√£o manual")
            
            # For√ßa uma atualiza√ß√£o de todos os s√≠mbolos monitorados
            monitored_symbols = [c['symbol'] for c in self.config.get('cryptos_to_monitor', [])]
            
            for i, symbol in enumerate(monitored_symbols):
                # Respeita o rate limiting
                robust_services.rate_limiter.wait_if_needed()
                
                # Atualiza dados do s√≠mbolo
                from monitoring_service import run_single_symbol_update
                run_single_symbol_update(symbol, self.config, self.data_queue, self.coingecko_mapping)
                
                # Pausa maior entre s√≠mbolos durante atualiza√ß√£o manual
                time.sleep(0.2)
                
                # Atualiza o status a cada 5 s√≠mbolos
                if (i + 1) % 5 == 0:
                    self.root.after(0, lambda i=i: self.update_status_label.config(
                        text=f"Atualizando... ({i+1}/{len(monitored_symbols)})"
                    ))
            
            # Atualiza a domin√¢ncia do BTC
            self.update_dominance_display()
            
            # Desativa modo conservador
            robust_services.rate_limiter.set_manual_update_mode(False)
            
            # Atualiza a UI na thread principal
            self.root.after(0, self._update_complete)
            
        except Exception as e:
            print(f"ERRO: Erro durante atualiza√ß√£o manual: {e}")
            # Desativa modo conservador em caso de erro
            robust_services.rate_limiter.set_manual_update_mode(False)
            self.root.after(0, self._update_error, str(e))
    
    def _update_complete(self):
        """Chamado quando a atualiza√ß√£o manual √© conclu√≠da com sucesso."""
        self.update_button.config(state='normal', text='üîÑ Atualizar Pre√ßos')
        self.update_status_label.config(text="‚úì Atualizado", bootstyle="success")
        
        # Remove a mensagem de sucesso ap√≥s 3 segundos
        self.root.after(3000, lambda: self.update_status_label.config(text=""))
    
    def check_api_status(self):
        """Verifica o status da API e atualiza o bot√£o dinamicamente."""
        try:
            can_update, status_message = robust_services.rate_limiter.can_perform_manual_update()
            usage = robust_services.rate_limiter.get_current_usage()
            
            if can_update:
                # API segura - bot√£o habilitado
                self.update_button.config(state='normal', text='üîÑ Atualizar Pre√ßos', bootstyle="info-outline")
                # Atualiza tooltip com informa√ß√µes detalhadas
                self.update_button.bind('<Enter>', lambda e: self.show_api_tooltip(usage))
            else:
                # API em limite - bot√£o desabilitado
                self.update_button.config(state='disabled', text='‚è∏Ô∏è API Limitada', bootstyle="secondary-outline")
                # Atualiza tooltip com informa√ß√µes detalhadas
                self.update_button.bind('<Enter>', lambda e: self.show_api_tooltip(usage))
            
            # Agenda pr√≥xima verifica√ß√£o em 10 segundos
            self.root.after(10000, self.check_api_status)
            
        except Exception as e:
            print(f"ERRO: Erro ao verificar status da API: {e}")
            # Em caso de erro, agenda pr√≥xima verifica√ß√£o
            self.root.after(10000, self.check_api_status)
    
    def show_api_tooltip(self, usage):
        """Mostra tooltip com informa√ß√µes detalhadas da API."""
        tooltip_text = f"""Status da API:
1 min: {usage['requests_1min']}/{usage['limit_1min']} ({usage['1min']:.1f}%)
5 min: {usage['requests_5min']}/{usage['limit_5min']} ({usage['5min']:.1f}%)"""
        
        # Cria tooltip tempor√°rio
        x, y, _, _ = self.update_button.bbox("insert")
        x += self.update_button.winfo_rootx() + 25
        y += self.update_button.winfo_rooty() + 20
        
        self.tooltip = tk.Toplevel(self.root)
        self.tooltip.wm_overrideredirect(True)
        self.tooltip.wm_geometry(f"+{x}+{y}")
        
        label = tk.Label(self.tooltip, text=tooltip_text, justify=tk.LEFT,
                        background="#ffffe0", relief=tk.SOLID, borderwidth=1)
        label.pack()
        
        # Remove tooltip ap√≥s 3 segundos
        self.root.after(3000, lambda: self.tooltip.destroy() if hasattr(self, 'tooltip') else None)

    def _update_error(self, error_msg):
        """Chamado quando h√° erro na atualiza√ß√£o manual."""
        self.update_button.config(state='normal', text='üîÑ Atualizar Pre√ßos')
        self.update_status_label.config(text="‚úó Erro", bootstyle="danger")
        
        # Remove a mensagem de erro ap√≥s 5 segundos
        self.root.after(5000, lambda: self.update_status_label.config(text=""))

    def _on_mousewheel(self, event):
        """Manipula o evento de rolagem do mouse para o canvas"""
        self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
    def _pulse_label(self, label, color_style):
        """
        Cria um efeito de pulsa√ß√£o no label para destacar mudan√ßas de pre√ßo
        """
        # Salva o estilo atual
        original_style = label.cget('bootstyle')
        
        # Sequ√™ncia de pulsa√ß√£o: forte -> fraco -> normal
        self.root.after(0, lambda: label.config(bootstyle=f"{color_style}"))
        self.root.after(600, lambda: label.config(bootstyle=f"{color_style}-outline"))
        self.root.after(1200, lambda: label.config(bootstyle=original_style))

def get_current_config():
    """Retorna a configura√ß√£o atual do aplicativo."""
    config_path = os.path.join(get_application_path(), "config.json")
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {
            "cryptos_to_monitor": [],
            "telegram_bot_token": "",
            "telegram_chat_id": "",
            "check_interval_seconds": 300
        }

if __name__ == "__main__":
    config = get_current_config()
    
    if 'market_analysis_config' not in config:
        config['market_analysis_config'] = {
            'top_n': 25,
            'min_market_cap': 50000000
        }
        
    all_symbols_list = fetch_all_binance_symbols_startup(config)
    
    startup_root = ttkb.Window(themename="darkly")
    
    if not config.get("cryptos_to_monitor"):
        startup_root.withdraw()
        config_dialog = StartupConfigDialog(startup_root, all_symbols_list, config)
        startup_root.wait_window(config_dialog)
        if not config_dialog.session_started:
            sys.exit("Configura√ß√£o inicial cancelada.")
            
    app = CryptoApp(startup_root, config, all_symbols_list)
    startup_root.protocol("WM_DELETE_WINDOW", app.on_closing)
    startup_root.mainloop()